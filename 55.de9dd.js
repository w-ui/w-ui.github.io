webpackJsonp([55],{641:function(module,exports,__webpack_require__){eval("var Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(642),\n  /* template */\n  __webpack_require__(643),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvUXJjb2RlLnZ1ZT9jOWQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1FyY29kZS52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTk1NTlhNTVjXFxcIn0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1FyY29kZS52dWVcIiksXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogY3NzTW9kdWxlcyAqL1xuICBudWxsXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZXhhbXBsZXMvUXJjb2RlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjQxXG4vLyBtb2R1bGUgY2h1bmtzID0gNTUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///641\n")},642:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_packages_qrcode__ = __webpack_require__(88);\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n  components: {\n    \'w-qrcode\': __WEBPACK_IMPORTED_MODULE_0_packages_qrcode__["a" /* default */]\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL1FyY29kZS52dWU/MTRiNCJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXY+XG4gICAgPGRpdiBjbGFzcz1cInBhcmFncmFwaFwiPlxuICAgICAgdXJsOiAnaHR0cHM6Ly93LXVpLmdpdGh1Yi5pbydcbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicGFyYWdyYXBoXCI+XG4gICAgICA8aDM+6buY6K6kPC9oMz5cbiAgICAgIDx3LXFyY29kZSB0ZXh0PVwiaHR0cHM6Ly93LXVpLmdpdGh1Yi5pb1wiIDpzaXplPVwiMTI4XCI+PC93LXFyY29kZT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicGFyYWdyYXBoXCI+XG4gICAgICA8aDM+5bimbG9nbzwvaDM+XG4gICAgICA8dy1xcmNvZGUgdGV4dD1cImh0dHBzOi8vZ2l0aHViLmNvbS93LXVpXCIgOnNpemU9XCIyMDBcIiBpbWFnZT1cIi9pbWcvd3VpLnBuZ1wiPjwvdy1xcmNvZGU+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgUXJjb2RlIGZyb20gJ3BhY2thZ2VzL3FyY29kZSdcblxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ3ctcXJjb2RlJzogUXJjb2RlXG4gICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFFyY29kZS52dWU/NjkwY2JhMGQiXSwibWFwcGluZ3MiOiI7Ozs7QUFpQkE7QUFDQTtBQUNBOztBQUdBO0FBREE7QUFEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///642\n')},643:function(module,exports){eval('module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\'div\', [_c(\'div\', {\n    staticClass: "paragraph"\n  }, [_vm._v("\\n    url: \'https://w-ui.github.io\'\\n  ")]), _vm._v(" "), _c(\'div\', {\n    staticClass: "paragraph"\n  }, [_c(\'h3\', [_vm._v("默认")]), _vm._v(" "), _c(\'w-qrcode\', {\n    attrs: {\n      "text": "https://w-ui.github.io",\n      "size": 128\n    }\n  })], 1), _vm._v(" "), _c(\'div\', {\n    staticClass: "paragraph"\n  }, [_c(\'h3\', [_vm._v("带logo")]), _vm._v(" "), _c(\'w-qrcode\', {\n    attrs: {\n      "text": "https://github.com/w-ui",\n      "size": 200,\n      "image": "/img/wui.png"\n    }\n  })], 1)])\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvUXJjb2RlLnZ1ZT9iZWFiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2JywgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicGFyYWdyYXBoXCJcbiAgfSwgW192bS5fdihcIlxcbiAgICB1cmw6ICdodHRwczovL3ctdWkuZ2l0aHViLmlvJ1xcbiAgXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicGFyYWdyYXBoXCJcbiAgfSwgW19jKCdoMycsIFtfdm0uX3YoXCLpu5jorqRcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3ctcXJjb2RlJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInRleHRcIjogXCJodHRwczovL3ctdWkuZ2l0aHViLmlvXCIsXG4gICAgICBcInNpemVcIjogMTI4XG4gICAgfVxuICB9KV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcInBhcmFncmFwaFwiXG4gIH0sIFtfYygnaDMnLCBbX3ZtLl92KFwi5bimbG9nb1wiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndy1xcmNvZGUnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidGV4dFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS93LXVpXCIsXG4gICAgICBcInNpemVcIjogMjAwLFxuICAgICAgXCJpbWFnZVwiOiBcIi9pbWcvd3VpLnBuZ1wiXG4gICAgfVxuICB9KV0sIDEpXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTk1NTlhNTVjXCJ9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2V4YW1wbGVzL1FyY29kZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDU1Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///643\n')},88:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_qrcode_vue__ = __webpack_require__(89);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_qrcode_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__src_qrcode_vue__);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_qrcode_vue___default.a; });\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcGFja2FnZXMvcXJjb2RlL2luZGV4LmpzPzZjYWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vc3JjL3FyY29kZS52dWUnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcGFja2FnZXMvcXJjb2RlL2luZGV4LmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///88\n')},89:function(module,exports,__webpack_require__){eval("var Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(90),\n  /* template */\n  __webpack_require__(93),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9xcmNvZGUvc3JjL3FyY29kZS52dWU/NGE2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9xcmNvZGUudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0xYTQzN2UyY1xcXCJ9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9xcmNvZGUudnVlXCIpLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIGNzc01vZHVsZXMgKi9cbiAgbnVsbFxuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3BhY2thZ2VzL3FyY29kZS9zcmMvcXJjb2RlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gODlcbi8vIG1vZHVsZSBjaHVua3MgPSA0OCA1NSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///89\n")},90:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__qrwrap_js__ = __webpack_require__(91);\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'w-qrcode',\n  props: {\n    text: {\n      type: String,\n      default: ''\n    },\n    image: {\n      type: String,\n      default: ''\n    },\n    size: {\n      type: Number,\n      default: 128\n    }\n  },\n  mounted: function mounted() {\n    Object(__WEBPACK_IMPORTED_MODULE_0__qrwrap_js__[\"a\" /* drawQrcode */])(this.$refs.canvas, {\n      render: 'canvas',\n      size: this.size,\n      text: this.text,\n      image: this.image\n    });\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcXJjb2RlLnZ1ZT8wZDMxIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8Y2FudmFzIHJlZj1cImNhbnZhc1wiPjwvY2FudmFzPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQge2RyYXdRcmNvZGV9IGZyb20gJy4vcXJ3cmFwLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAndy1xcmNvZGUnLFxuICBwcm9wczoge1xuICAgIHRleHQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSwgXG4gICAgaW1hZ2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSwgXG4gICAgc2l6ZToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMTI4XG4gICAgfVxuICB9LFxuICBtb3VudGVkKCl7XG4gICAgZHJhd1FyY29kZSh0aGlzLiRyZWZzLmNhbnZhcywge1xuICAgICAgcmVuZGVyOiAnY2FudmFzJyxcbiAgICAgIHNpemU6IHRoaXMuc2l6ZSxcbiAgICAgIHRleHQ6IHRoaXMudGV4dCxcbiAgICAgIGltYWdlOiB0aGlzLmltYWdlXG4gICAgfSk7XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcXJjb2RlLnZ1ZT8yMmRmZmRhNiJdLCJtYXBwaW5ncyI6Ijs7OztBQU9BO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBRkE7O0FBS0E7QUFDQTtBQUZBOztBQUtBO0FBQ0E7QUFGQTtBQVRBO0FBY0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBdkJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///90\n")},91:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = drawQrcode;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__qrcode_js__ = __webpack_require__(92);\n\n\nfunction createQRCode(text, level, version, quiet) {\n  var qr = {};\n\n  var vqr = Object(__WEBPACK_IMPORTED_MODULE_0__qrcode_js__[\"a\" /* default */])(version, level);\n  vqr.addData(text);\n  vqr.make();\n\n  quiet = quiet || 0;\n\n  var qrModuleCount = vqr.getModuleCount();\n  var quietModuleCount = vqr.getModuleCount() + 2 * quiet;\n\n  function isDark(row, col) {\n    row -= quiet;\n    col -= quiet;\n\n    if (row < 0 || row >= qrModuleCount || col < 0 || col >= qrModuleCount) {\n      return false;\n    }\n    return vqr.isDark(row, col);\n  }\n\n  function addBlank(l, t, r, b) {\n    var prevIsDark = qr.isDark;\n    var moduleSize = 1 / quietModuleCount;\n\n    qr.isDark = function (row, col) {\n      var ml = col * moduleSize;\n      var mt = row * moduleSize;\n      var mr = ml + moduleSize;\n      var mb = mt + moduleSize;\n\n      return prevIsDark(row, col) && (l > mr || ml > r || t > mb || mt > b);\n    };\n  }\n\n  qr.text = text;\n  qr.level = level;\n  qr.version = version;\n  qr.moduleCount = quietModuleCount;\n  qr.isDark = isDark;\n  qr.addBlank = addBlank;\n\n  return qr;\n}\n\nfunction createMinQRCode(text, level, minVersion, maxVersion, quiet) {\n  minVersion = Math.max(1, minVersion || 1);\n  maxVersion = Math.min(40, maxVersion || 40);\n  for (var version = minVersion; version <= maxVersion; version += 1) {\n    try {\n      return createQRCode(text, level, version, quiet);\n    } catch (err) {}\n  }\n  return undefined;\n}\n\nfunction drawBackgroundLabel(qr, context, settings) {\n  var size = settings.size;\n  var font = 'bold ' + settings.mSize * size + 'px ' + settings.fontname;\n\n  var ctx = document.createElement('canvas').getContext('2d');\n  ctx.font = font;\n\n  var w = ctx.measureText(settings.label).width;\n  var sh = settings.mSize;\n  var sw = w / size;\n  var sl = (1 - sw) * settings.mPosX;\n  var st = (1 - sh) * settings.mPosY;\n  var sr = sl + sw;\n  var sb = st + sh;\n  var pad = 0.01;\n\n  if (settings.mode === 1) {\n    qr.addBlank(0, st - pad, size, sb + pad);\n  } else {\n    qr.addBlank(sl - pad, st - pad, sr + pad, sb + pad);\n  }\n\n  context.fillStyle = settings.fontcolor;\n  context.font = font;\n  context.fillText(settings.label, sl * size, st * size + 0.75 * settings.mSize * size);\n}\n\nfunction drawBackgroundImage(qr, context, settings) {\n  console.log('drawBackgroundImage>>>>');\n  var size = settings.size;\n  var w = settings.image.naturalWidth || 1;\n  var h = settings.image.naturalHeight || 1;\n  var sh = settings.mSize;\n  var sw = sh * w / h;\n  var sl = (1 - sw) * settings.mPosX;\n  var st = (1 - sh) * settings.mPosY;\n  var sr = sl + sw;\n  var sb = st + sh;\n  var pad = 0.01;\n\n  if (settings.mode === 3) {\n    qr.addBlank(0, st - pad, size, sb + pad);\n  } else {\n    qr.addBlank(sl - pad, st - pad, sr + pad, sb + pad);\n  }\n\n  context.drawImage(settings.image, sl * size, st * size, sw * size, sh * size);\n}\n\nfunction drawBackground(qr, context, settings) {\n  if (settings.background) {\n    context.fillStyle = settings.background;\n    context.fillRect(settings.left, settings.top, settings.size, settings.size);\n  }\n\n  var mode = settings.mode;\n  if (mode === 1 || mode === 2) {\n    drawBackgroundLabel(qr, context, settings);\n  } else if (mode === 3 || mode === 4) {\n    drawBackgroundImage(qr, context, settings);\n  }\n}\n\nfunction drawModuleDefault(qr, context, settings, left, top, width, row, col) {\n  if (qr.isDark(row, col)) {\n    context.rect(left, top, width, width);\n  }\n}\n\nfunction drawModuleRoundedDark(ctx, l, t, r, b, rad, nw, ne, se, sw) {\n  if (nw) {\n    ctx.moveTo(l + rad, t);\n  } else {\n    ctx.moveTo(l, t);\n  }\n\n  if (ne) {\n    ctx.lineTo(r - rad, t);\n    ctx.arcTo(r, t, r, b, rad);\n  } else {\n    ctx.lineTo(r, t);\n  }\n\n  if (se) {\n    ctx.lineTo(r, b - rad);\n    ctx.arcTo(r, b, l, b, rad);\n  } else {\n    ctx.lineTo(r, b);\n  }\n\n  if (sw) {\n    ctx.lineTo(l + rad, b);\n    ctx.arcTo(l, b, l, t, rad);\n  } else {\n    ctx.lineTo(l, b);\n  }\n\n  if (nw) {\n    ctx.lineTo(l, t + rad);\n    ctx.arcTo(l, t, r, t, rad);\n  } else {\n    ctx.lineTo(l, t);\n  }\n}\n\nfunction drawModuleRoundendLight(ctx, l, t, r, b, rad, nw, ne, se, sw) {\n  if (nw) {\n    ctx.moveTo(l + rad, t);\n    ctx.lineTo(l, t);\n    ctx.lineTo(l, t + rad);\n    ctx.arcTo(l, t, l + rad, t, rad);\n  }\n\n  if (ne) {\n    ctx.moveTo(r - rad, t);\n    ctx.lineTo(r, t);\n    ctx.lineTo(r, t + rad);\n    ctx.arcTo(r, t, r - rad, t, rad);\n  }\n\n  if (se) {\n    ctx.moveTo(r - rad, b);\n    ctx.lineTo(r, b);\n    ctx.lineTo(r, b - rad);\n    ctx.arcTo(r, b, r - rad, b, rad);\n  }\n\n  if (sw) {\n    ctx.moveTo(l + rad, b);\n    ctx.lineTo(l, b);\n    ctx.lineTo(l, b - rad);\n    ctx.arcTo(l, b, l + rad, b, rad);\n  }\n}\n\nfunction drawModuleRounded(qr, context, settings, left, top, width, row, col) {\n  var isDark = qr.isDark;\n  var right = left + width;\n  var bottom = top + width;\n  var radius = settings.radius * width;\n  var rowT = row - 1;\n  var rowB = row + 1;\n  var colL = col - 1;\n  var colR = col + 1;\n  var center = isDark(row, col);\n  var northwest = isDark(rowT, colL);\n  var north = isDark(rowT, col);\n  var northeast = isDark(rowT, colR);\n  var east = isDark(row, colR);\n  var southeast = isDark(rowB, colR);\n  var south = isDark(rowB, col);\n  var southwest = isDark(rowB, colL);\n  var west = isDark(row, colL);\n\n  if (center) {\n    drawModuleRoundedDark(context, left, top, right, bottom, radius, !north && !west, !north && !east, !south && !east, !south && !west);\n  } else {\n    drawModuleRoundendLight(context, left, top, right, bottom, radius, north && west && northwest, north && east && northeast, south && east && southeast, south && west && southwest);\n  }\n}\n\nfunction drawModules(qr, context, settings) {\n  var moduleCount = qr.moduleCount;\n  var moduleSize = settings.size / moduleCount;\n  var fn = drawModuleDefault;\n  var row;\n  var col;\n\n  if (settings.radius > 0 && settings.radius <= 0.5) {\n    fn = drawModuleRounded;\n  }\n\n  context.beginPath();\n  for (row = 0; row < moduleCount; row += 1) {\n    for (col = 0; col < moduleCount; col += 1) {\n      var l = settings.left + col * moduleSize;\n      var t = settings.top + row * moduleSize;\n      var w = moduleSize;\n\n      fn(qr, context, settings, l, t, w, row, col);\n    }\n  }\n  if (typeof settings.fill !== 'string') {\n    context.strokeStyle = 'rgba(0,0,0,0.5)';\n    context.lineWidth = 2;\n    context.stroke();\n    var prev = context.globalCompositeOperation;\n    context.globalCompositeOperation = 'destination-out';\n    context.fill();\n    context.globalCompositeOperation = prev;\n\n    context.clip();\n    context.drawImage(settings.fill, 0, 0, settings.size, settings.size);\n    context.restore();\n  } else {\n    context.fillStyle = settings.fill;\n    context.fill();\n  }\n}\n\nfunction drawOnCanvas(canvas, settings) {\n  var qr = createMinQRCode(settings.text, settings.ecLevel, settings.minVersion, settings.maxVersion, settings.quiet);\n  if (!qr) {\n    return null;\n  }\n  var context = canvas.getContext('2d');\n  drawBackground(qr, context, settings);\n  drawModules(qr, context, settings);\n}\n\nvar defaults = {\n  render: 'canvas',\n\n  minVersion: 1,\n  maxVersion: 40,\n\n  ecLevel: 'L',\n\n  left: 0,\n  top: 0,\n\n  size: 128,\n\n  fill: '#000',\n\n  background: null,\n\n  text: 'no text',\n\n  radius: 0,\n\n  quiet: 0,\n\n  mode: 0,\n\n  mSize: 0.1,\n  mPosX: 0.5,\n  mPosY: 0.5,\n\n  label: 'no label',\n  fontname: 'sans',\n  fontcolor: '#000',\n\n  image: null\n};\n\nfunction loadImage(src, fn) {\n  var img = new Image();\n  img.onload = function () {\n    fn && fn(img);\n  };\n  img.src = src;\n}\n\nfunction drawQrcode(el, settings) {\n  var ratio = 3;\n  var scaleSize = settings.size * ratio;\n  el.width = scaleSize;\n  el.height = scaleSize;\n  el.style.width = settings.size + 'px';\n  el.style.height = settings.size + 'px';\n  settings.size = scaleSize;\n\n  var opts = Object.assign(defaults, settings);\n  if (settings.image) {\n    opts.mode = 4;\n    loadImage(opts.image, function (img) {\n      opts.image = img;\n      drawOnCanvas(el, opts, ratio);\n    });\n  } else {\n    drawOnCanvas(el, opts, ratio);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcGFja2FnZXMvcXJjb2RlL3NyYy9xcndyYXAuanM/OTM3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcXJjb2RlIGZyb20gJy4vcXJjb2RlLmpzJ1xuXG4vLyBXcmFwcGVyIGZvciB0aGUgb3JpZ2luYWwgUVIgY29kZSBnZW5lcmF0b3IuXG5mdW5jdGlvbiBjcmVhdGVRUkNvZGUgKHRleHQsIGxldmVsLCB2ZXJzaW9uLCBxdWlldCkge1xuICB2YXIgcXIgPSB7fVxuXG4gIHZhciB2cXIgPSBxcmNvZGUodmVyc2lvbiwgbGV2ZWwpXG4gIHZxci5hZGREYXRhKHRleHQpXG4gIHZxci5tYWtlKClcblxuICBxdWlldCA9IHF1aWV0IHx8IDBcblxuICB2YXIgcXJNb2R1bGVDb3VudCA9IHZxci5nZXRNb2R1bGVDb3VudCgpXG4gIHZhciBxdWlldE1vZHVsZUNvdW50ID0gdnFyLmdldE1vZHVsZUNvdW50KCkgKyAyICogcXVpZXRcblxuICBmdW5jdGlvbiBpc0RhcmsgKHJvdywgY29sKSB7XG4gICAgcm93IC09IHF1aWV0XG4gICAgY29sIC09IHF1aWV0XG5cbiAgICBpZiAocm93IDwgMCB8fCByb3cgPj0gcXJNb2R1bGVDb3VudCB8fCBjb2wgPCAwIHx8IGNvbCA+PSBxck1vZHVsZUNvdW50KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHZxci5pc0Rhcmsocm93LCBjb2wpXG4gIH1cblxuICBmdW5jdGlvbiBhZGRCbGFuayAobCwgdCwgciwgYikge1xuICAgIHZhciBwcmV2SXNEYXJrID0gcXIuaXNEYXJrXG4gICAgdmFyIG1vZHVsZVNpemUgPSAxIC8gcXVpZXRNb2R1bGVDb3VudFxuXG4gICAgcXIuaXNEYXJrID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gICAgICB2YXIgbWwgPSBjb2wgKiBtb2R1bGVTaXplXG4gICAgICB2YXIgbXQgPSByb3cgKiBtb2R1bGVTaXplXG4gICAgICB2YXIgbXIgPSBtbCArIG1vZHVsZVNpemVcbiAgICAgIHZhciBtYiA9IG10ICsgbW9kdWxlU2l6ZVxuXG4gICAgICByZXR1cm4gcHJldklzRGFyayhyb3csIGNvbCkgJiYgKGwgPiBtciB8fCBtbCA+IHIgfHwgdCA+IG1iIHx8IG10ID4gYilcbiAgICB9XG4gIH1cblxuICBxci50ZXh0ID0gdGV4dFxuICBxci5sZXZlbCA9IGxldmVsXG4gIHFyLnZlcnNpb24gPSB2ZXJzaW9uXG4gIHFyLm1vZHVsZUNvdW50ID0gcXVpZXRNb2R1bGVDb3VudFxuICBxci5pc0RhcmsgPSBpc0RhcmtcbiAgcXIuYWRkQmxhbmsgPSBhZGRCbGFua1xuXG4gIHJldHVybiBxclxufVxuXG4vLyBSZXR1cm5zIGEgbWluaW1hbCBRUiBjb2RlIGZvciB0aGUgZ2l2ZW4gdGV4dCBzdGFydGluZyB3aXRoIHZlcnNpb24gYG1pblZlcnNpb25gLlxuLy8gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBgdGV4dGAgaXMgdG9vIGxvbmcgdG8gYmUgZW5jb2RlZCBpbiBgbWF4VmVyc2lvbmAuXG5mdW5jdGlvbiBjcmVhdGVNaW5RUkNvZGUgKHRleHQsIGxldmVsLCBtaW5WZXJzaW9uLCBtYXhWZXJzaW9uLCBxdWlldCkge1xuICBtaW5WZXJzaW9uID0gTWF0aC5tYXgoMSwgbWluVmVyc2lvbiB8fCAxKVxuICBtYXhWZXJzaW9uID0gTWF0aC5taW4oNDAsIG1heFZlcnNpb24gfHwgNDApXG4gIGZvciAodmFyIHZlcnNpb24gPSBtaW5WZXJzaW9uOyB2ZXJzaW9uIDw9IG1heFZlcnNpb247IHZlcnNpb24gKz0gMSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY3JlYXRlUVJDb2RlKHRleHQsIGxldmVsLCB2ZXJzaW9uLCBxdWlldClcbiAgICB9IGNhdGNoIChlcnIpIHsgLyogZW1wdHkgKi8gfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gZHJhd0JhY2tncm91bmRMYWJlbCAocXIsIGNvbnRleHQsIHNldHRpbmdzKSB7XG4gIHZhciBzaXplID0gc2V0dGluZ3Muc2l6ZVxuICB2YXIgZm9udCA9ICdib2xkICcgKyBzZXR0aW5ncy5tU2l6ZSAqIHNpemUgKyAncHggJyArIHNldHRpbmdzLmZvbnRuYW1lXG5cbiAgdmFyIGN0eCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJylcbiAgY3R4LmZvbnQgPSBmb250XG5cbiAgdmFyIHcgPSBjdHgubWVhc3VyZVRleHQoc2V0dGluZ3MubGFiZWwpLndpZHRoXG4gIHZhciBzaCA9IHNldHRpbmdzLm1TaXplXG4gIHZhciBzdyA9IHcgLyBzaXplXG4gIHZhciBzbCA9ICgxIC0gc3cpICogc2V0dGluZ3MubVBvc1hcbiAgdmFyIHN0ID0gKDEgLSBzaCkgKiBzZXR0aW5ncy5tUG9zWVxuICB2YXIgc3IgPSBzbCArIHN3XG4gIHZhciBzYiA9IHN0ICsgc2hcbiAgdmFyIHBhZCA9IDAuMDFcblxuICBpZiAoc2V0dGluZ3MubW9kZSA9PT0gMSkge1xuICAgICAgICAvLyBTdHJpcFxuICAgIHFyLmFkZEJsYW5rKDAsIHN0IC0gcGFkLCBzaXplLCBzYiArIHBhZClcbiAgfSBlbHNlIHtcbiAgICAgICAgLy8gQm94XG4gICAgcXIuYWRkQmxhbmsoc2wgLSBwYWQsIHN0IC0gcGFkLCBzciArIHBhZCwgc2IgKyBwYWQpXG4gIH1cblxuICBjb250ZXh0LmZpbGxTdHlsZSA9IHNldHRpbmdzLmZvbnRjb2xvclxuICBjb250ZXh0LmZvbnQgPSBmb250XG4gIGNvbnRleHQuZmlsbFRleHQoc2V0dGluZ3MubGFiZWwsIHNsICogc2l6ZSwgc3QgKiBzaXplICsgMC43NSAqIHNldHRpbmdzLm1TaXplICogc2l6ZSlcbn1cblxuZnVuY3Rpb24gZHJhd0JhY2tncm91bmRJbWFnZSAocXIsIGNvbnRleHQsIHNldHRpbmdzKSB7XG4gIGNvbnNvbGUubG9nKCdkcmF3QmFja2dyb3VuZEltYWdlPj4+PicpXG4gIHZhciBzaXplID0gc2V0dGluZ3Muc2l6ZVxuICB2YXIgdyA9IHNldHRpbmdzLmltYWdlLm5hdHVyYWxXaWR0aCB8fCAxXG4gIHZhciBoID0gc2V0dGluZ3MuaW1hZ2UubmF0dXJhbEhlaWdodCB8fCAxXG4gIHZhciBzaCA9IHNldHRpbmdzLm1TaXplXG4gIHZhciBzdyA9IHNoICogdyAvIGhcbiAgdmFyIHNsID0gKDEgLSBzdykgKiBzZXR0aW5ncy5tUG9zWFxuICB2YXIgc3QgPSAoMSAtIHNoKSAqIHNldHRpbmdzLm1Qb3NZXG4gIHZhciBzciA9IHNsICsgc3dcbiAgdmFyIHNiID0gc3QgKyBzaFxuICB2YXIgcGFkID0gMC4wMVxuXG4gIGlmIChzZXR0aW5ncy5tb2RlID09PSAzKSB7XG4gICAgICAgIC8vIFN0cmlwXG4gICAgcXIuYWRkQmxhbmsoMCwgc3QgLSBwYWQsIHNpemUsIHNiICsgcGFkKVxuICB9IGVsc2Uge1xuICAgICAgICAvLyBCb3hcbiAgICBxci5hZGRCbGFuayhzbCAtIHBhZCwgc3QgLSBwYWQsIHNyICsgcGFkLCBzYiArIHBhZClcbiAgfVxuXG4gIGNvbnRleHQuZHJhd0ltYWdlKHNldHRpbmdzLmltYWdlLCBzbCAqIHNpemUsIHN0ICogc2l6ZSwgc3cgKiBzaXplLCBzaCAqIHNpemUpXG59XG5cbmZ1bmN0aW9uIGRyYXdCYWNrZ3JvdW5kIChxciwgY29udGV4dCwgc2V0dGluZ3MpIHtcbiAgaWYgKHNldHRpbmdzLmJhY2tncm91bmQpIHtcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHNldHRpbmdzLmJhY2tncm91bmRcbiAgICBjb250ZXh0LmZpbGxSZWN0KHNldHRpbmdzLmxlZnQsIHNldHRpbmdzLnRvcCwgc2V0dGluZ3Muc2l6ZSwgc2V0dGluZ3Muc2l6ZSlcbiAgfVxuXG4gIHZhciBtb2RlID0gc2V0dGluZ3MubW9kZVxuICBpZiAobW9kZSA9PT0gMSB8fCBtb2RlID09PSAyKSB7XG4gICAgZHJhd0JhY2tncm91bmRMYWJlbChxciwgY29udGV4dCwgc2V0dGluZ3MpXG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gMyB8fCBtb2RlID09PSA0KSB7XG4gICAgZHJhd0JhY2tncm91bmRJbWFnZShxciwgY29udGV4dCwgc2V0dGluZ3MpXG4gIH1cbn1cblxuZnVuY3Rpb24gZHJhd01vZHVsZURlZmF1bHQgKHFyLCBjb250ZXh0LCBzZXR0aW5ncywgbGVmdCwgdG9wLCB3aWR0aCwgcm93LCBjb2wpIHtcbiAgaWYgKHFyLmlzRGFyayhyb3csIGNvbCkpIHtcbiAgICBjb250ZXh0LnJlY3QobGVmdCwgdG9wLCB3aWR0aCwgd2lkdGgpXG4gIH1cbn1cblxuZnVuY3Rpb24gZHJhd01vZHVsZVJvdW5kZWREYXJrIChjdHgsIGwsIHQsIHIsIGIsIHJhZCwgbncsIG5lLCBzZSwgc3cpIHtcbiAgaWYgKG53KSB7XG4gICAgY3R4Lm1vdmVUbyhsICsgcmFkLCB0KVxuICB9IGVsc2Uge1xuICAgIGN0eC5tb3ZlVG8obCwgdClcbiAgfVxuXG4gIGlmIChuZSkge1xuICAgIGN0eC5saW5lVG8ociAtIHJhZCwgdClcbiAgICBjdHguYXJjVG8ociwgdCwgciwgYiwgcmFkKVxuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lVG8ociwgdClcbiAgfVxuXG4gIGlmIChzZSkge1xuICAgIGN0eC5saW5lVG8ociwgYiAtIHJhZClcbiAgICBjdHguYXJjVG8ociwgYiwgbCwgYiwgcmFkKVxuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lVG8ociwgYilcbiAgfVxuXG4gIGlmIChzdykge1xuICAgIGN0eC5saW5lVG8obCArIHJhZCwgYilcbiAgICBjdHguYXJjVG8obCwgYiwgbCwgdCwgcmFkKVxuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lVG8obCwgYilcbiAgfVxuXG4gIGlmIChudykge1xuICAgIGN0eC5saW5lVG8obCwgdCArIHJhZClcbiAgICBjdHguYXJjVG8obCwgdCwgciwgdCwgcmFkKVxuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lVG8obCwgdClcbiAgfVxufVxuXG5mdW5jdGlvbiBkcmF3TW9kdWxlUm91bmRlbmRMaWdodCAoY3R4LCBsLCB0LCByLCBiLCByYWQsIG53LCBuZSwgc2UsIHN3KSB7XG4gIGlmIChudykge1xuICAgIGN0eC5tb3ZlVG8obCArIHJhZCwgdClcbiAgICBjdHgubGluZVRvKGwsIHQpXG4gICAgY3R4LmxpbmVUbyhsLCB0ICsgcmFkKVxuICAgIGN0eC5hcmNUbyhsLCB0LCBsICsgcmFkLCB0LCByYWQpXG4gIH1cblxuICBpZiAobmUpIHtcbiAgICBjdHgubW92ZVRvKHIgLSByYWQsIHQpXG4gICAgY3R4LmxpbmVUbyhyLCB0KVxuICAgIGN0eC5saW5lVG8ociwgdCArIHJhZClcbiAgICBjdHguYXJjVG8ociwgdCwgciAtIHJhZCwgdCwgcmFkKVxuICB9XG5cbiAgaWYgKHNlKSB7XG4gICAgY3R4Lm1vdmVUbyhyIC0gcmFkLCBiKVxuICAgIGN0eC5saW5lVG8ociwgYilcbiAgICBjdHgubGluZVRvKHIsIGIgLSByYWQpXG4gICAgY3R4LmFyY1RvKHIsIGIsIHIgLSByYWQsIGIsIHJhZClcbiAgfVxuXG4gIGlmIChzdykge1xuICAgIGN0eC5tb3ZlVG8obCArIHJhZCwgYilcbiAgICBjdHgubGluZVRvKGwsIGIpXG4gICAgY3R4LmxpbmVUbyhsLCBiIC0gcmFkKVxuICAgIGN0eC5hcmNUbyhsLCBiLCBsICsgcmFkLCBiLCByYWQpXG4gIH1cbn1cblxuZnVuY3Rpb24gZHJhd01vZHVsZVJvdW5kZWQgKHFyLCBjb250ZXh0LCBzZXR0aW5ncywgbGVmdCwgdG9wLCB3aWR0aCwgcm93LCBjb2wpIHtcbiAgdmFyIGlzRGFyayA9IHFyLmlzRGFya1xuICB2YXIgcmlnaHQgPSBsZWZ0ICsgd2lkdGhcbiAgdmFyIGJvdHRvbSA9IHRvcCArIHdpZHRoXG4gIHZhciByYWRpdXMgPSBzZXR0aW5ncy5yYWRpdXMgKiB3aWR0aFxuICB2YXIgcm93VCA9IHJvdyAtIDFcbiAgdmFyIHJvd0IgPSByb3cgKyAxXG4gIHZhciBjb2xMID0gY29sIC0gMVxuICB2YXIgY29sUiA9IGNvbCArIDFcbiAgdmFyIGNlbnRlciA9IGlzRGFyayhyb3csIGNvbClcbiAgdmFyIG5vcnRod2VzdCA9IGlzRGFyayhyb3dULCBjb2xMKVxuICB2YXIgbm9ydGggPSBpc0Rhcmsocm93VCwgY29sKVxuICB2YXIgbm9ydGhlYXN0ID0gaXNEYXJrKHJvd1QsIGNvbFIpXG4gIHZhciBlYXN0ID0gaXNEYXJrKHJvdywgY29sUilcbiAgdmFyIHNvdXRoZWFzdCA9IGlzRGFyayhyb3dCLCBjb2xSKVxuICB2YXIgc291dGggPSBpc0Rhcmsocm93QiwgY29sKVxuICB2YXIgc291dGh3ZXN0ID0gaXNEYXJrKHJvd0IsIGNvbEwpXG4gIHZhciB3ZXN0ID0gaXNEYXJrKHJvdywgY29sTClcblxuICBpZiAoY2VudGVyKSB7XG4gICAgZHJhd01vZHVsZVJvdW5kZWREYXJrKGNvbnRleHQsIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSwgcmFkaXVzLCAhbm9ydGggJiYgIXdlc3QsICFub3J0aCAmJiAhZWFzdCwgIXNvdXRoICYmICFlYXN0LCAhc291dGggJiYgIXdlc3QpXG4gIH0gZWxzZSB7XG4gICAgZHJhd01vZHVsZVJvdW5kZW5kTGlnaHQoY29udGV4dCwgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tLCByYWRpdXMsIG5vcnRoICYmIHdlc3QgJiYgbm9ydGh3ZXN0LCBub3J0aCAmJiBlYXN0ICYmIG5vcnRoZWFzdCwgc291dGggJiYgZWFzdCAmJiBzb3V0aGVhc3QsIHNvdXRoICYmIHdlc3QgJiYgc291dGh3ZXN0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdNb2R1bGVzIChxciwgY29udGV4dCwgc2V0dGluZ3MpIHtcbiAgdmFyIG1vZHVsZUNvdW50ID0gcXIubW9kdWxlQ291bnRcbiAgdmFyIG1vZHVsZVNpemUgPSBzZXR0aW5ncy5zaXplIC8gbW9kdWxlQ291bnRcbiAgdmFyIGZuID0gZHJhd01vZHVsZURlZmF1bHRcbiAgdmFyIHJvd1xuICB2YXIgY29sXG5cbiAgaWYgKHNldHRpbmdzLnJhZGl1cyA+IDAgJiYgc2V0dGluZ3MucmFkaXVzIDw9IDAuNSkge1xuICAgIGZuID0gZHJhd01vZHVsZVJvdW5kZWRcbiAgfVxuXG4gIGNvbnRleHQuYmVnaW5QYXRoKClcbiAgZm9yIChyb3cgPSAwOyByb3cgPCBtb2R1bGVDb3VudDsgcm93ICs9IDEpIHtcbiAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IG1vZHVsZUNvdW50OyBjb2wgKz0gMSkge1xuICAgICAgdmFyIGwgPSBzZXR0aW5ncy5sZWZ0ICsgY29sICogbW9kdWxlU2l6ZVxuICAgICAgdmFyIHQgPSBzZXR0aW5ncy50b3AgKyByb3cgKiBtb2R1bGVTaXplXG4gICAgICB2YXIgdyA9IG1vZHVsZVNpemVcblxuICAgICAgZm4ocXIsIGNvbnRleHQsIHNldHRpbmdzLCBsLCB0LCB3LCByb3csIGNvbClcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiAoc2V0dGluZ3MuZmlsbCkgIT09ICdzdHJpbmcnKSB7XG4gICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuNSknXG4gICAgY29udGV4dC5saW5lV2lkdGggPSAyXG4gICAgY29udGV4dC5zdHJva2UoKVxuICAgIHZhciBwcmV2ID0gY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb25cbiAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1vdXQnXG4gICAgY29udGV4dC5maWxsKClcbiAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IHByZXZcblxuICAgIGNvbnRleHQuY2xpcCgpXG4gICAgY29udGV4dC5kcmF3SW1hZ2Uoc2V0dGluZ3MuZmlsbCwgMCwgMCwgc2V0dGluZ3Muc2l6ZSwgc2V0dGluZ3Muc2l6ZSlcbiAgICBjb250ZXh0LnJlc3RvcmUoKVxuICB9IGVsc2Uge1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gc2V0dGluZ3MuZmlsbFxuICAgIGNvbnRleHQuZmlsbCgpXG4gIH1cbn1cblxuLy8gRHJhd3MgUVIgY29kZSB0byB0aGUgZ2l2ZW4gYGNhbnZhc2AgYW5kIHJldHVybnMgaXQuXG5mdW5jdGlvbiBkcmF3T25DYW52YXMgKGNhbnZhcywgc2V0dGluZ3MpIHtcbiAgdmFyIHFyID0gY3JlYXRlTWluUVJDb2RlKHNldHRpbmdzLnRleHQsIHNldHRpbmdzLmVjTGV2ZWwsIHNldHRpbmdzLm1pblZlcnNpb24sIHNldHRpbmdzLm1heFZlcnNpb24sIHNldHRpbmdzLnF1aWV0KVxuICBpZiAoIXFyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gIGRyYXdCYWNrZ3JvdW5kKHFyLCBjb250ZXh0LCBzZXR0aW5ncylcbiAgZHJhd01vZHVsZXMocXIsIGNvbnRleHQsIHNldHRpbmdzKVxufVxuXG4vLyBQbHVnaW5cbi8vID09PT09PVxuXG4vLyBEZWZhdWx0IHNldHRpbmdzXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgLy8gcmVuZGVyIG1ldGhvZDogYCdjYW52YXMnYCwgYCdpbWFnZSdgIG9yIGAnZGl2J2BcbiAgcmVuZGVyOiAnY2FudmFzJyxcblxuICAgIC8vIHZlcnNpb24gcmFuZ2Ugc29tZXdoZXJlIGluIDEgLi4gNDBcbiAgbWluVmVyc2lvbjogMSxcbiAgbWF4VmVyc2lvbjogNDAsXG5cbiAgICAvLyBlcnJvciBjb3JyZWN0aW9uIGxldmVsOiBgJ0wnYCwgYCdNJ2AsIGAnUSdgIG9yIGAnSCdgXG4gIGVjTGV2ZWw6ICdMJyxcblxuICAgIC8vIG9mZnNldCBpbiBwaXhlbCBpZiBkcmF3biBvbnRvIGV4aXN0aW5nIGNhbnZhc1xuICBsZWZ0OiAwLFxuICB0b3A6IDAsXG5cbiAgICAvLyBzaXplIGluIHBpeGVsXG4gIHNpemU6IDEyOCxcblxuICAgIC8vIGNvZGUgY29sb3Igb3IgaW1hZ2UgZWxlbWVudFxuICBmaWxsOiAnIzAwMCcsXG5cbiAgICAvLyBiYWNrZ3JvdW5kIGNvbG9yIG9yIGltYWdlIGVsZW1lbnQsIGBudWxsYCBmb3IgdHJhbnNwYXJlbnQgYmFja2dyb3VuZFxuICBiYWNrZ3JvdW5kOiBudWxsLFxuXG4gICAgLy8gY29udGVudFxuICB0ZXh0OiAnbm8gdGV4dCcsXG5cbiAgICAvLyBjb3JuZXIgcmFkaXVzIHJlbGF0aXZlIHRvIG1vZHVsZSB3aWR0aDogMC4wIC4uIDAuNVxuICByYWRpdXM6IDAsXG5cbiAgICAvLyBxdWlldCB6b25lIGluIG1vZHVsZXNcbiAgcXVpZXQ6IDAsXG5cbiAgICAvLyBtb2Rlc1xuICAgIC8vIDA6IG5vcm1hbFxuICAgIC8vIDE6IGxhYmVsIHN0cmlwXG4gICAgLy8gMjogbGFiZWwgYm94XG4gICAgLy8gMzogaW1hZ2Ugc3RyaXBcbiAgICAvLyA0OiBpbWFnZSBib3hcbiAgbW9kZTogMCxcblxuICBtU2l6ZTogMC4xLFxuICBtUG9zWDogMC41LFxuICBtUG9zWTogMC41LFxuXG4gIGxhYmVsOiAnbm8gbGFiZWwnLFxuICBmb250bmFtZTogJ3NhbnMnLFxuICBmb250Y29sb3I6ICcjMDAwJyxcblxuICBpbWFnZTogbnVsbFxufVxuXG5mdW5jdGlvbiBsb2FkSW1hZ2UgKHNyYywgZm4pIHtcbiAgbGV0IGltZyA9IG5ldyBJbWFnZSgpXG4gIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgZm4gJiYgZm4oaW1nKVxuICB9XG4gIGltZy5zcmMgPSBzcmNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdRcmNvZGUgKGVsLCBzZXR0aW5ncykge1xuICBsZXQgcmF0aW8gPSAzXG4gIGxldCBzY2FsZVNpemUgPSBzZXR0aW5ncy5zaXplICogcmF0aW9cbiAgZWwud2lkdGggPSBzY2FsZVNpemVcbiAgZWwuaGVpZ2h0ID0gc2NhbGVTaXplXG4gIGVsLnN0eWxlLndpZHRoID0gc2V0dGluZ3Muc2l6ZSArICdweCdcbiAgZWwuc3R5bGUuaGVpZ2h0ID0gc2V0dGluZ3Muc2l6ZSArICdweCdcbiAgc2V0dGluZ3Muc2l6ZSA9IHNjYWxlU2l6ZVxuXG4gIGxldCBvcHRzID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgc2V0dGluZ3MpXG4gIGlmIChzZXR0aW5ncy5pbWFnZSkge1xuICAgIG9wdHMubW9kZSA9IDRcbiAgICBsb2FkSW1hZ2Uob3B0cy5pbWFnZSwgKGltZykgPT4ge1xuICAgICAgb3B0cy5pbWFnZSA9IGltZ1xuICAgICAgZHJhd09uQ2FudmFzKGVsLCBvcHRzLCByYXRpbylcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGRyYXdPbkNhbnZhcyhlbCwgb3B0cywgcmF0aW8pXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBwYWNrYWdlcy9xcmNvZGUvc3JjL3Fyd3JhcC5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWpEQTtBQUNBO0FBbURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///91\n")},92:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n\nvar qrcode = function () {\n  var qrcode = function qrcode(typeNumber, errorCorrectLevel) {\n\n    var PAD0 = 0xEC;\n    var PAD1 = 0x11;\n\n    var _typeNumber = typeNumber;\n    var _errorCorrectLevel = QRErrorCorrectLevel[errorCorrectLevel];\n    var _modules = null;\n    var _moduleCount = 0;\n    var _dataCache = null;\n    var _dataList = new Array();\n\n    var _this = {};\n\n    var makeImpl = function makeImpl(test, maskPattern) {\n\n      _moduleCount = _typeNumber * 4 + 17;\n      _modules = function (moduleCount) {\n        var modules = new Array(moduleCount);\n        for (var row = 0; row < moduleCount; row += 1) {\n          modules[row] = new Array(moduleCount);\n          for (var col = 0; col < moduleCount; col += 1) {\n            modules[row][col] = null;\n          }\n        }\n        return modules;\n      }(_moduleCount);\n\n      setupPositionProbePattern(0, 0);\n      setupPositionProbePattern(_moduleCount - 7, 0);\n      setupPositionProbePattern(0, _moduleCount - 7);\n      setupPositionAdjustPattern();\n      setupTimingPattern();\n      setupTypeInfo(test, maskPattern);\n\n      if (_typeNumber >= 7) {\n        setupTypeNumber(test);\n      }\n\n      if (_dataCache == null) {\n        _dataCache = createData(_typeNumber, _errorCorrectLevel, _dataList);\n      }\n\n      mapData(_dataCache, maskPattern);\n    };\n\n    var setupPositionProbePattern = function setupPositionProbePattern(row, col) {\n\n      for (var r = -1; r <= 7; r += 1) {\n\n        if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n        for (var c = -1; c <= 7; c += 1) {\n\n          if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            _modules[row + r][col + c] = true;\n          } else {\n            _modules[row + r][col + c] = false;\n          }\n        }\n      }\n    };\n\n    var getBestMaskPattern = function getBestMaskPattern() {\n\n      var minLostPoint = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < 8; i += 1) {\n\n        makeImpl(true, i);\n\n        var lostPoint = QRUtil.getLostPoint(_this);\n\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n\n      return pattern;\n    };\n\n    var setupTimingPattern = function setupTimingPattern() {\n\n      for (var r = 8; r < _moduleCount - 8; r += 1) {\n        if (_modules[r][6] != null) {\n          continue;\n        }\n        _modules[r][6] = r % 2 == 0;\n      }\n\n      for (var c = 8; c < _moduleCount - 8; c += 1) {\n        if (_modules[6][c] != null) {\n          continue;\n        }\n        _modules[6][c] = c % 2 == 0;\n      }\n    };\n\n    var setupPositionAdjustPattern = function setupPositionAdjustPattern() {\n\n      var pos = QRUtil.getPatternPosition(_typeNumber);\n\n      for (var i = 0; i < pos.length; i += 1) {\n\n        for (var j = 0; j < pos.length; j += 1) {\n\n          var row = pos[i];\n          var col = pos[j];\n\n          if (_modules[row][col] != null) {\n            continue;\n          }\n\n          for (var r = -2; r <= 2; r += 1) {\n\n            for (var c = -2; c <= 2; c += 1) {\n\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                _modules[row + r][col + c] = true;\n              } else {\n                _modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    var setupTypeNumber = function setupTypeNumber(test) {\n\n      var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n      }\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    };\n\n    var setupTypeInfo = function setupTypeInfo(test, maskPattern) {\n\n      var data = _errorCorrectLevel << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n\n      for (var i = 0; i < 15; i += 1) {\n\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 6) {\n          _modules[i][8] = mod;\n        } else if (i < 8) {\n          _modules[i + 1][8] = mod;\n        } else {\n          _modules[_moduleCount - 15 + i][8] = mod;\n        }\n      }\n\n      for (var i = 0; i < 15; i += 1) {\n\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 8) {\n          _modules[8][_moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          _modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          _modules[8][15 - i - 1] = mod;\n        }\n      }\n\n      _modules[_moduleCount - 8][8] = !test;\n    };\n\n    var mapData = function mapData(data, maskPattern) {\n\n      var inc = -1;\n      var row = _moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      var maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n      for (var col = _moduleCount - 1; col > 0; col -= 2) {\n\n        if (col == 6) col -= 1;\n\n        while (true) {\n\n          for (var c = 0; c < 2; c += 1) {\n\n            if (_modules[row][col - c] == null) {\n\n              var dark = false;\n\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n\n              var mask = maskFunc(row, col - c);\n\n              if (mask) {\n                dark = !dark;\n              }\n\n              _modules[row][col - c] = dark;\n              bitIndex -= 1;\n\n              if (bitIndex == -1) {\n                byteIndex += 1;\n                bitIndex = 7;\n              }\n            }\n          }\n\n          row += inc;\n\n          if (row < 0 || _moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    };\n\n    var createBytes = function createBytes(buffer, rsBlocks) {\n\n      var offset = 0;\n\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n\n      for (var r = 0; r < rsBlocks.length; r += 1) {\n\n        var dcCount = rsBlocks[r].dataCount;\n        var ecCount = rsBlocks[r].totalCount - dcCount;\n\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n\n        dcdata[r] = new Array(dcCount);\n\n        for (var i = 0; i < dcdata[r].length; i += 1) {\n          dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n        }\n        offset += dcCount;\n\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i += 1) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n        }\n      }\n\n      var totalCodeCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalCodeCount += rsBlocks[i].totalCount;\n      }\n\n      var data = new Array(totalCodeCount);\n      var index = 0;\n\n      for (var i = 0; i < maxDcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < dcdata[r].length) {\n            data[index] = dcdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      for (var i = 0; i < maxEcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < ecdata[r].length) {\n            data[index] = ecdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      return data;\n    };\n\n    var createData = function createData(typeNumber, errorCorrectLevel, dataList) {\n\n      var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\n      var buffer = qrBitBuffer();\n\n      for (var i = 0; i < dataList.length; i += 1) {\n        var data = dataList[i];\n        buffer.put(data.getMode(), 4);\n        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n        data.write(buffer);\n      }\n\n      var totalDataCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      if (buffer.getLengthInBits() > totalDataCount * 8) {\n        throw new Error('code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataCount * 8 + ')');\n      }\n\n      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n\n      while (buffer.getLengthInBits() % 8 != 0) {\n        buffer.putBit(false);\n      }\n\n      while (true) {\n\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD0, 8);\n\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD1, 8);\n      }\n\n      return createBytes(buffer, rsBlocks);\n    };\n\n    _this.addData = function (data) {\n      var newData = qr8BitByte(data);\n      _dataList.push(newData);\n      _dataCache = null;\n    };\n\n    _this.isDark = function (row, col) {\n      if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n        throw new Error(row + ',' + col);\n      }\n      return _modules[row][col];\n    };\n\n    _this.getModuleCount = function () {\n      return _moduleCount;\n    };\n\n    _this.make = function () {\n      makeImpl(false, getBestMaskPattern());\n    };\n\n    _this.createTableTag = function (cellSize, margin) {\n\n      cellSize = cellSize || 2;\n      margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n\n      var qrHtml = '';\n\n      qrHtml += '<table style=\"';\n      qrHtml += ' border-width: 0px; border-style: none;';\n      qrHtml += ' border-collapse: collapse;';\n      qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n      qrHtml += '\">';\n      qrHtml += '<tbody>';\n\n      for (var r = 0; r < _this.getModuleCount(); r += 1) {\n\n        qrHtml += '<tr>';\n\n        for (var c = 0; c < _this.getModuleCount(); c += 1) {\n          qrHtml += '<td style=\"';\n          qrHtml += ' border-width: 0px; border-style: none;';\n          qrHtml += ' border-collapse: collapse;';\n          qrHtml += ' padding: 0px; margin: 0px;';\n          qrHtml += ' width: ' + cellSize + 'px;';\n          qrHtml += ' height: ' + cellSize + 'px;';\n          qrHtml += ' background-color: ';\n          qrHtml += _this.isDark(r, c) ? '#000000' : '#ffffff';\n          qrHtml += ';';\n          qrHtml += '\"/>';\n        }\n\n        qrHtml += '</tr>';\n      }\n\n      qrHtml += '</tbody>';\n      qrHtml += '</table>';\n\n      return qrHtml;\n    };\n\n    _this.createImgTag = function (cellSize, margin) {\n\n      cellSize = cellSize || 2;\n      margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n\n      return createImgTag(size, size, function (x, y) {\n        if (min <= x && x < max && min <= y && y < max) {\n          var c = Math.floor((x - min) / cellSize);\n          var r = Math.floor((y - min) / cellSize);\n          return _this.isDark(r, c) ? 0 : 1;\n        } else {\n          return 1;\n        }\n      });\n    };\n\n    return _this;\n  };\n\n  qrcode.stringToBytes = function (s) {\n    function toUTF8Array(str) {\n      var utf8 = [];\n      for (var i = 0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {\n          utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n        } else if (charcode < 0xd800 || charcode >= 0xe000) {\n          utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n        } else {\n            i++;\n\n            charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n            utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n          }\n      }\n      return utf8;\n    }\n    return toUTF8Array(s);\n  };\n\n  qrcode.createStringToBytes = function (unicodeData, numChars) {\n\n    var unicodeMap = function () {\n\n      var bin = base64DecodeInputStream(unicodeData);\n      var read = function read() {\n        var b = bin.read();\n        if (b == -1) throw new Error();\n        return b;\n      };\n\n      var count = 0;\n      var unicodeMap = {};\n      while (true) {\n        var b0 = bin.read();\n        if (b0 == -1) break;\n        var b1 = read();\n        var b2 = read();\n        var b3 = read();\n        var k = String.fromCharCode(b0 << 8 | b1);\n        var v = b2 << 8 | b3;\n        unicodeMap[k] = v;\n        count += 1;\n      }\n      if (count != numChars) {\n        throw new Error(count + ' != ' + numChars);\n      }\n\n      return unicodeMap;\n    }();\n\n    var unknownChar = '?'.charCodeAt(0);\n\n    return function (s) {\n      var bytes = new Array();\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        if (c < 128) {\n          bytes.push(c);\n        } else {\n          var b = unicodeMap[s.charAt(i)];\n          if (typeof b == 'number') {\n            if ((b & 0xff) == b) {\n              bytes.push(b);\n            } else {\n              bytes.push(b >>> 8);\n              bytes.push(b & 0xff);\n            }\n          } else {\n            bytes.push(unknownChar);\n          }\n        }\n      }\n      return bytes;\n    };\n  };\n\n  var QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3\n  };\n\n  var QRErrorCorrectLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2\n  };\n\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7\n  };\n\n  var QRUtil = function () {\n\n    var PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];\n    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n\n    var _this = {};\n\n    var getBCHDigit = function getBCHDigit(data) {\n      var digit = 0;\n      while (data != 0) {\n        digit += 1;\n        data >>>= 1;\n      }\n      return digit;\n    };\n\n    _this.getBCHTypeInfo = function (data) {\n      var d = data << 10;\n      while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n        d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\n      }\n      return (data << 10 | d) ^ G15_MASK;\n    };\n\n    _this.getBCHTypeNumber = function (data) {\n      var d = data << 12;\n      while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n        d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\n      }\n      return data << 12 | d;\n    };\n\n    _this.getPatternPosition = function (typeNumber) {\n      return PATTERN_POSITION_TABLE[typeNumber - 1];\n    };\n\n    _this.getMaskFunction = function (maskPattern) {\n\n      switch (maskPattern) {\n\n        case QRMaskPattern.PATTERN000:\n          return function (i, j) {\n            return (i + j) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN001:\n          return function (i, j) {\n            return i % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN010:\n          return function (i, j) {\n            return j % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN011:\n          return function (i, j) {\n            return (i + j) % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN100:\n          return function (i, j) {\n            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN101:\n          return function (i, j) {\n            return i * j % 2 + i * j % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN110:\n          return function (i, j) {\n            return (i * j % 2 + i * j % 3) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN111:\n          return function (i, j) {\n            return (i * j % 3 + (i + j) % 2) % 2 == 0;\n          };\n\n        default:\n          throw new Error('bad maskPattern:' + maskPattern);\n      }\n    };\n\n    _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\n      var a = qrPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i += 1) {\n        a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\n      }\n      return a;\n    };\n\n    _this.getLengthInBits = function (mode, type) {\n\n      if (1 <= type && type < 10) {\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 10;\n          case QRMode.MODE_ALPHA_NUM:\n            return 9;\n          case QRMode.MODE_8BIT_BYTE:\n            return 8;\n          case QRMode.MODE_KANJI:\n            return 8;\n          default:\n            throw new Error('mode:' + mode);\n        }\n      } else if (type < 27) {\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 12;\n          case QRMode.MODE_ALPHA_NUM:\n            return 11;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 10;\n          default:\n            throw new Error('mode:' + mode);\n        }\n      } else if (type < 41) {\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 14;\n          case QRMode.MODE_ALPHA_NUM:\n            return 13;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 12;\n          default:\n            throw new Error('mode:' + mode);\n        }\n      } else {\n        throw new Error('type:' + type);\n      }\n    };\n\n    _this.getLostPoint = function (qrcode) {\n\n      var moduleCount = qrcode.getModuleCount();\n\n      var lostPoint = 0;\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount; col += 1) {\n\n          var sameCount = 0;\n          var dark = qrcode.isDark(row, col);\n\n          for (var r = -1; r <= 1; r += 1) {\n\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n\n            for (var c = -1; c <= 1; c += 1) {\n\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n\n              if (r == 0 && c == 0) {\n                continue;\n              }\n\n              if (dark == qrcode.isDark(row + r, col + c)) {\n                sameCount += 1;\n              }\n            }\n          }\n\n          if (sameCount > 5) {\n            lostPoint += 3 + sameCount - 5;\n          }\n        }\n      };\n\n      for (var row = 0; row < moduleCount - 1; row += 1) {\n        for (var col = 0; col < moduleCount - 1; col += 1) {\n          var count = 0;\n          if (qrcode.isDark(row, col)) count += 1;\n          if (qrcode.isDark(row + 1, col)) count += 1;\n          if (qrcode.isDark(row, col + 1)) count += 1;\n          if (qrcode.isDark(row + 1, col + 1)) count += 1;\n          if (count == 0 || count == 4) {\n            lostPoint += 3;\n          }\n        }\n      }\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount - 6; col += 1) {\n          if (qrcode.isDark(row, col) && !qrcode.isDark(row, col + 1) && qrcode.isDark(row, col + 2) && qrcode.isDark(row, col + 3) && qrcode.isDark(row, col + 4) && !qrcode.isDark(row, col + 5) && qrcode.isDark(row, col + 6)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount - 6; row += 1) {\n          if (qrcode.isDark(row, col) && !qrcode.isDark(row + 1, col) && qrcode.isDark(row + 2, col) && qrcode.isDark(row + 3, col) && qrcode.isDark(row + 4, col) && !qrcode.isDark(row + 5, col) && qrcode.isDark(row + 6, col)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      var darkCount = 0;\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount; row += 1) {\n          if (qrcode.isDark(row, col)) {\n            darkCount += 1;\n          }\n        }\n      }\n\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n\n      return lostPoint;\n    };\n\n    return _this;\n  }();\n\n  var QRMath = function () {\n\n    var EXP_TABLE = new Array(256);\n    var LOG_TABLE = new Array(256);\n\n    for (var i = 0; i < 8; i += 1) {\n      EXP_TABLE[i] = 1 << i;\n    }\n    for (var i = 8; i < 256; i += 1) {\n      EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n    }\n    for (var i = 0; i < 255; i += 1) {\n      LOG_TABLE[EXP_TABLE[i]] = i;\n    }\n\n    var _this = {};\n\n    _this.glog = function (n) {\n\n      if (n < 1) {\n        throw new Error('glog(' + n + ')');\n      }\n\n      return LOG_TABLE[n];\n    };\n\n    _this.gexp = function (n) {\n\n      while (n < 0) {\n        n += 255;\n      }\n\n      while (n >= 256) {\n        n -= 255;\n      }\n\n      return EXP_TABLE[n];\n    };\n\n    return _this;\n  }();\n\n  function qrPolynomial(num, shift) {\n\n    if (typeof num.length == 'undefined') {\n      throw new Error(num.length + '/' + shift);\n    }\n\n    var _num = function () {\n      var offset = 0;\n      while (offset < num.length && num[offset] == 0) {\n        offset += 1;\n      }\n      var _num = new Array(num.length - offset + shift);\n      for (var i = 0; i < num.length - offset; i += 1) {\n        _num[i] = num[i + offset];\n      }\n      return _num;\n    }();\n\n    var _this = {};\n\n    _this.getAt = function (index) {\n      return _num[index];\n    };\n\n    _this.getLength = function () {\n      return _num.length;\n    };\n\n    _this.multiply = function (e) {\n\n      var num = new Array(_this.getLength() + e.getLength() - 1);\n\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        for (var j = 0; j < e.getLength(); j += 1) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\n        }\n      }\n\n      return qrPolynomial(num, 0);\n    };\n\n    _this.mod = function (e) {\n\n      if (_this.getLength() - e.getLength() < 0) {\n        return _this;\n      }\n\n      var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n\n      var num = new Array(_this.getLength());\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        num[i] = _this.getAt(i);\n      }\n\n      for (var i = 0; i < e.getLength(); i += 1) {\n        num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n      }\n\n      return qrPolynomial(num, 0).mod(e);\n    };\n\n    return _this;\n  };\n\n  var QRRSBlock = function () {\n\n    var RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\n    var qrRSBlock = function qrRSBlock(totalCount, dataCount) {\n      var _this = {};\n      _this.totalCount = totalCount;\n      _this.dataCount = dataCount;\n      return _this;\n    };\n\n    var _this = {};\n\n    var getRsBlockTable = function getRsBlockTable(typeNumber, errorCorrectLevel) {\n\n      switch (errorCorrectLevel) {\n        case QRErrorCorrectLevel.L:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n        case QRErrorCorrectLevel.M:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n        case QRErrorCorrectLevel.Q:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n        case QRErrorCorrectLevel.H:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n        default:\n          return undefined;\n      }\n    };\n\n    _this.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n\n      var rsBlock = getRsBlockTable(typeNumber, errorCorrectLevel);\n\n      if (typeof rsBlock == 'undefined') {\n        throw new Error('bad rs block @ typeNumber:' + typeNumber + '/errorCorrectLevel:' + errorCorrectLevel);\n      }\n\n      var length = rsBlock.length / 3;\n\n      var list = new Array();\n\n      for (var i = 0; i < length; i += 1) {\n\n        var count = rsBlock[i * 3 + 0];\n        var totalCount = rsBlock[i * 3 + 1];\n        var dataCount = rsBlock[i * 3 + 2];\n\n        for (var j = 0; j < count; j += 1) {\n          list.push(qrRSBlock(totalCount, dataCount));\n        }\n      }\n\n      return list;\n    };\n\n    return _this;\n  }();\n\n  var qrBitBuffer = function qrBitBuffer() {\n\n    var _buffer = new Array();\n    var _length = 0;\n\n    var _this = {};\n\n    _this.getBuffer = function () {\n      return _buffer;\n    };\n\n    _this.getAt = function (index) {\n      var bufIndex = Math.floor(index / 8);\n      return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n    };\n\n    _this.put = function (num, length) {\n      for (var i = 0; i < length; i += 1) {\n        _this.putBit((num >>> length - i - 1 & 1) == 1);\n      }\n    };\n\n    _this.getLengthInBits = function () {\n      return _length;\n    };\n\n    _this.putBit = function (bit) {\n\n      var bufIndex = Math.floor(_length / 8);\n      if (_buffer.length <= bufIndex) {\n        _buffer.push(0);\n      }\n\n      if (bit) {\n        _buffer[bufIndex] |= 0x80 >>> _length % 8;\n      }\n\n      _length += 1;\n    };\n\n    return _this;\n  };\n\n  var qr8BitByte = function qr8BitByte(data) {\n\n    var _mode = QRMode.MODE_8BIT_BYTE;\n    var _data = data;\n    var _bytes = qrcode.stringToBytes(data);\n\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return _bytes.length;\n    };\n\n    _this.write = function (buffer) {\n      for (var i = 0; i < _bytes.length; i += 1) {\n        buffer.put(_bytes[i], 8);\n      }\n    };\n\n    return _this;\n  };\n\n  var byteArrayOutputStream = function byteArrayOutputStream() {\n\n    var _bytes = new Array();\n\n    var _this = {};\n\n    _this.writeByte = function (b) {\n      _bytes.push(b & 0xff);\n    };\n\n    _this.writeShort = function (i) {\n      _this.writeByte(i);\n      _this.writeByte(i >>> 8);\n    };\n\n    _this.writeBytes = function (b, off, len) {\n      off = off || 0;\n      len = len || b.length;\n      for (var i = 0; i < len; i += 1) {\n        _this.writeByte(b[i + off]);\n      }\n    };\n\n    _this.writeString = function (s) {\n      for (var i = 0; i < s.length; i += 1) {\n        _this.writeByte(s.charCodeAt(i));\n      }\n    };\n\n    _this.toByteArray = function () {\n      return _bytes;\n    };\n\n    _this.toString = function () {\n      var s = '';\n      s += '[';\n      for (var i = 0; i < _bytes.length; i += 1) {\n        if (i > 0) {\n          s += ',';\n        }\n        s += _bytes[i];\n      }\n      s += ']';\n      return s;\n    };\n\n    return _this;\n  };\n\n  var base64EncodeOutputStream = function base64EncodeOutputStream() {\n\n    var _buffer = 0;\n    var _buflen = 0;\n    var _length = 0;\n    var _base64 = '';\n\n    var _this = {};\n\n    var writeEncoded = function writeEncoded(b) {\n      _base64 += String.fromCharCode(encode(b & 0x3f));\n    };\n\n    var encode = function encode(n) {\n      if (n < 0) {} else if (n < 26) {\n        return 0x41 + n;\n      } else if (n < 52) {\n        return 0x61 + (n - 26);\n      } else if (n < 62) {\n        return 0x30 + (n - 52);\n      } else if (n == 62) {\n        return 0x2b;\n      } else if (n == 63) {\n        return 0x2f;\n      }\n      throw new Error('n:' + n);\n    };\n\n    _this.writeByte = function (n) {\n\n      _buffer = _buffer << 8 | n & 0xff;\n      _buflen += 8;\n      _length += 1;\n\n      while (_buflen >= 6) {\n        writeEncoded(_buffer >>> _buflen - 6);\n        _buflen -= 6;\n      }\n    };\n\n    _this.flush = function () {\n\n      if (_buflen > 0) {\n        writeEncoded(_buffer << 6 - _buflen);\n        _buffer = 0;\n        _buflen = 0;\n      }\n\n      if (_length % 3 != 0) {\n        var padlen = 3 - _length % 3;\n        for (var i = 0; i < padlen; i += 1) {\n          _base64 += '=';\n        }\n      }\n    };\n\n    _this.toString = function () {\n      return _base64;\n    };\n\n    return _this;\n  };\n\n  var base64DecodeInputStream = function base64DecodeInputStream(str) {\n\n    var _str = str;\n    var _pos = 0;\n    var _buffer = 0;\n    var _buflen = 0;\n\n    var _this = {};\n\n    _this.read = function () {\n\n      while (_buflen < 8) {\n\n        if (_pos >= _str.length) {\n          if (_buflen == 0) {\n            return -1;\n          }\n          throw new Error('unexpected end of file./' + _buflen);\n        }\n\n        var c = _str.charAt(_pos);\n        _pos += 1;\n\n        if (c == '=') {\n          _buflen = 0;\n          return -1;\n        } else if (c.match(/^\\s$/)) {\n          continue;\n        }\n\n        _buffer = _buffer << 6 | decode(c.charCodeAt(0));\n        _buflen += 6;\n      }\n\n      var n = _buffer >>> _buflen - 8 & 0xff;\n      _buflen -= 8;\n      return n;\n    };\n\n    var decode = function decode(c) {\n      if (0x41 <= c && c <= 0x5a) {\n        return c - 0x41;\n      } else if (0x61 <= c && c <= 0x7a) {\n        return c - 0x61 + 26;\n      } else if (0x30 <= c && c <= 0x39) {\n        return c - 0x30 + 52;\n      } else if (c == 0x2b) {\n        return 62;\n      } else if (c == 0x2f) {\n        return 63;\n      } else {\n        throw new Error('c:' + c);\n      }\n    };\n\n    return _this;\n  };\n\n  var gifImage = function gifImage(width, height) {\n\n    var _width = width;\n    var _height = height;\n    var _data = new Array(width * height);\n\n    var _this = {};\n\n    _this.setPixel = function (x, y, pixel) {\n      _data[y * _width + x] = pixel;\n    };\n\n    _this.write = function (out) {\n\n      out.writeString('GIF87a');\n\n      out.writeShort(_width);\n      out.writeShort(_height);\n\n      out.writeByte(0x80);\n      out.writeByte(0);\n      out.writeByte(0);\n\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n\n      out.writeString(',');\n      out.writeShort(0);\n      out.writeShort(0);\n      out.writeShort(_width);\n      out.writeShort(_height);\n      out.writeByte(0);\n\n      var lzwMinCodeSize = 2;\n      var raster = getLZWRaster(lzwMinCodeSize);\n\n      out.writeByte(lzwMinCodeSize);\n\n      var offset = 0;\n\n      while (raster.length - offset > 255) {\n        out.writeByte(255);\n        out.writeBytes(raster, offset, 255);\n        offset += 255;\n      }\n\n      out.writeByte(raster.length - offset);\n      out.writeBytes(raster, offset, raster.length - offset);\n      out.writeByte(0x00);\n\n      out.writeString(';');\n    };\n\n    var bitOutputStream = function bitOutputStream(out) {\n\n      var _out = out;\n      var _bitLength = 0;\n      var _bitBuffer = 0;\n\n      var _this = {};\n\n      _this.write = function (data, length) {\n\n        if (data >>> length != 0) {\n          throw new Error('length over');\n        }\n\n        while (_bitLength + length >= 8) {\n          _out.writeByte(0xff & (data << _bitLength | _bitBuffer));\n          length -= 8 - _bitLength;\n          data >>>= 8 - _bitLength;\n          _bitBuffer = 0;\n          _bitLength = 0;\n        }\n\n        _bitBuffer = data << _bitLength | _bitBuffer;\n        _bitLength = _bitLength + length;\n      };\n\n      _this.flush = function () {\n        if (_bitLength > 0) {\n          _out.writeByte(_bitBuffer);\n        }\n      };\n\n      return _this;\n    };\n\n    var getLZWRaster = function getLZWRaster(lzwMinCodeSize) {\n\n      var clearCode = 1 << lzwMinCodeSize;\n      var endCode = (1 << lzwMinCodeSize) + 1;\n      var bitLength = lzwMinCodeSize + 1;\n\n      var table = lzwTable();\n\n      for (var i = 0; i < clearCode; i += 1) {\n        table.add(String.fromCharCode(i));\n      }\n      table.add(String.fromCharCode(clearCode));\n      table.add(String.fromCharCode(endCode));\n\n      var byteOut = byteArrayOutputStream();\n      var bitOut = bitOutputStream(byteOut);\n\n      bitOut.write(clearCode, bitLength);\n\n      var dataIndex = 0;\n\n      var s = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n\n      while (dataIndex < _data.length) {\n\n        var c = String.fromCharCode(_data[dataIndex]);\n        dataIndex += 1;\n\n        if (table.contains(s + c)) {\n\n          s = s + c;\n        } else {\n\n          bitOut.write(table.indexOf(s), bitLength);\n\n          if (table.size() < 0xfff) {\n\n            if (table.size() == 1 << bitLength) {\n              bitLength += 1;\n            }\n\n            table.add(s + c);\n          }\n\n          s = c;\n        }\n      }\n\n      bitOut.write(table.indexOf(s), bitLength);\n\n      bitOut.write(endCode, bitLength);\n\n      bitOut.flush();\n\n      return byteOut.toByteArray();\n    };\n\n    var lzwTable = function lzwTable() {\n\n      var _map = {};\n      var _size = 0;\n\n      var _this = {};\n\n      _this.add = function (key) {\n        if (_this.contains(key)) {\n          throw new Error('dup key:' + key);\n        }\n        _map[key] = _size;\n        _size += 1;\n      };\n\n      _this.size = function () {\n        return _size;\n      };\n\n      _this.indexOf = function (key) {\n        return _map[key];\n      };\n\n      _this.contains = function (key) {\n        return typeof _map[key] != 'undefined';\n      };\n\n      return _this;\n    };\n\n    return _this;\n  };\n\n  var createImgTag = function createImgTag(width, height, getPixel, alt) {\n\n    var gif = gifImage(width, height);\n    for (var y = 0; y < height; y += 1) {\n      for (var x = 0; x < width; x += 1) {\n        gif.setPixel(x, y, getPixel(x, y));\n      }\n    }\n\n    var b = byteArrayOutputStream();\n    gif.write(b);\n\n    var base64 = base64EncodeOutputStream();\n    var bytes = b.toByteArray();\n    for (var i = 0; i < bytes.length; i += 1) {\n      base64.writeByte(bytes[i]);\n    }\n    base64.flush();\n\n    var img = '';\n    img += '<img';\n    img += ' src=\"';\n    img += 'data:image/gif;base64,';\n    img += base64;\n    img += '\"';\n    img += ' width=\"';\n    img += width;\n    img += '\"';\n    img += ' height=\"';\n    img += height;\n    img += '\"';\n    if (alt) {\n      img += ' alt=\"';\n      img += alt;\n      img += '\"';\n    }\n    img += '/>';\n\n    return img;\n  };\n\n  return qrcode;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (qrcode);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92\n")},93:function(module,exports){eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('canvas', {\n    ref: \"canvas\"\n  })])\n},staticRenderFns: []}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9xcmNvZGUvc3JjL3FyY29kZS52dWU/MDk2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIFtfYygnY2FudmFzJywge1xuICAgIHJlZjogXCJjYW52YXNcIlxuICB9KV0pXG59LHN0YXRpY1JlbmRlckZuczogW119XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0xYTQzN2UyY1wifSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9wYWNrYWdlcy9xcmNvZGUvc3JjL3FyY29kZS52dWVcbi8vIG1vZHVsZSBpZCA9IDkzXG4vLyBtb2R1bGUgY2h1bmtzID0gNDggNTUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///93\n")}});